/**
 * Given a binary tree where all the right nodes are either empty or leaf nodes, flip it upside down
 * and turn it into a tree with left leaf nodes.
 * In the original tree, if a node has a right child, it also must have a left child.
 *
 * for example, turn these:
 *
 *        1                1
 *       / \              / \
 *      2   3            2   3
 *     /
 *    4
 *   / \
 *  5   6
 *
 * into these:
 *
 *        1               1
 *       /               /
 *      2---3           2---3
 *     /
 *    4
 *   /
 *  5---6
 *
 * where 5 is the new root node for the left tree, and 2 for the right tree.
 * oriented correctly:
 *
 *     5                  2
 *    / \                / \
 *   6   4              3   1
 *        \
 *         2
 *        / \
 *       3   1
 *
 */
class TreeNode {
    TreeNode left;
    TreeNode right;
    int data;
}

public TreeNode reverse(TreeNode root){
    assert(root!=null);
    Stack<TreeNode> k = new Stack<TreeNode>();
    TreeNode node = root;
    while(node!=null){
        k.push(node);
        node=node.left;
    }
    TreeNode ret = k.peek();
    node=k.pop();
    while(k.size()>0){
        if(k.peek().right!=null)
            node.left=k.peek().right;
        else 
            node.left=null;
        node.right=k.peek();
        node=k.pop();
    }
    return ret;
}

public TreeNode reverseInplace(TreeNode root){
    assert(root!=null);
    TreeNode node = root,left=root.left,right=root.right;
    root.left=null;root.right=null;
    TreeNode tempLeft=null,tempRight=null;
    while(left!=null){
        tempLeft=left.left;
        tempRight=left.right;
        left.left=right;
        left.right=node;
        node=left;
        right=tempRight;
        left=tempLeft;
    }
    return node;
}
