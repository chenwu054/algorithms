/*
  an alternative to suffix tree,which is very space consuming.
  All the element in the array share a single string object and only the starting indices vary.
  Need to provide a separate comparator that is also given in code below.
  This data structure trades time complexity for space complexity. Building the array involving sorting the array
  which takes O(nlogn) where n is the length of the string.
  It also has an additional auxiliary array (possibly two, if no sorting is performed)
  The "height" array stores the number of longest prefix between the current element in the array and its last one.
  The "rank" array stores the ordering of each cell if the array is not sorted. In our case, since we sort the array, 
  rank array will be omitted.
*/

public class SuffixArray {
  // the fundamental component of suffix array: suffix node
  static class SuffixNode {
  	String s;
  	int start;
  	int num;
  	public SuffixNode(String str, int start){
  		this.s = str;
  		this.start=start;
  	}
  	public String toString(){
  		return s.substring(start);
  	}
  }
  // the comparator for the particular SuffixNode class
  static class SuffixNodeComparator implements Comparator<SuffixNode>{
  	public int compare(SuffixNode a,SuffixNode b){
  		String s = a.s;
  		int m = Math.min(s.length()-a.start,s.length()-b.start);
  		for(int i=0;i<m;i++){
  			if(s.charAt(i+a.start)!=s.charAt(i+b.start))
  				return s.charAt(i+a.start)-s.charAt(i+b.start);
  		}
  		return b.start-a.start;
  	}
  }
	String s;
	SuffixNode[] suffix;
	int[] rank;
	int[] height;
	public SuffixArray(String s){
		this.s=s;
		suffix=new SuffixNode[s.length()];
		for(int i=0;i<s.length();i++){
			suffix[i]=new SuffixNode(s,i);
		}
		Arrays.sort(suffix,new SuffixNodeComparator());
		rank=new int[s.length()];
		//maybe wrong
		for(int i=0;i<s.length();i++){
			rank[i]=suffix[i].start;
		}
		/*for(int i=0;i<s.length();i++){
			System.out.println(suffix[i]);
		}*/
		height=new int[s.length()];
		int n=s.length();
		for(int i=1;i<n;i++){
			boolean found=false;
			for(int j=0;j<Math.min(n-suffix[i].start,n-suffix[i-1].start);j++){
				if(s.charAt(suffix[i].start+j)!=s.charAt(suffix[i-1].start+j)){
					height[i]=j;
					found=true;
					break;
				}
			}
			if(!found)
				height[i]=Math.min(n-suffix[i].start,n-suffix[i-1].start);
		}
	}
	public String longestRepeatedSubstring(String s){
		SuffixArray a = new SuffixArray(s);
		int maxHeight=0;
		int index=0;
		for(int i=1;i<s.length();i++){
			if(a.height[i]>maxHeight){
				maxHeight=a.height[i];
				index=i;
			}
		}
		System.out.println(maxHeight);
		return s.substring(a.suffix[index].start,maxHeight);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s="abcdabcda";
		SuffixArray a= new SuffixArray(s);
		String ret =a.longestRepeatedSubstring(s);
		System.out.println(ret);
	}
}
