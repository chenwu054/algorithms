/*
	disjoint set, near constant amortized time for union and find.
*/
public class DisjointSet{
	static class Node{
		int val;
		int rank;
		Node parent;
		public Node(int v, int r){
			val=v;
			rank=r;
			parent=this;
		}
	}
	ArrayList<Node> nodes;
	public DisjointSet(int[] vals){
		nodes=new ArrayList<Node>();
		makeSet(nodes,vals);
	}
	private void makeSet(ArrayList<Node> nodes, int[] vals){
		for(int i=0;i<vals.length;i++){
			nodes.add(new Node(vals[i],0));
		}
	}
	public void addNode(int val){
		nodes.add(new Node(val,0));
	}
	//uses path comparison: flatten along the path of find method
	public Node find(Node node){
		if(node.parent!=node)
			node.parent = find(node.parent);
		return node.parent;
	}
	//uses weighted quick-union
	public void union(Node a, Node b){
		Node aRoot = find(a);
		Node bRoot = find(b);
		if(aRoot==bRoot)
			return;
		if(aRoot.rank>bRoot.rank){
			bRoot.parent = aRoot;
		}
		else if(aRoot.rank<bRoot.rank){
			aRoot.parent=bRoot;
		}
		else{
			bRoot.parent=aRoot;
			aRoot.rank+=1;
		}
	}
}








