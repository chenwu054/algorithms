/*
-  a 2-d matrix is composed of 0 or 1,
-  find the length of the largest square of all 1's
-  
-  Using dynamic programming to used one additional assistive matrix dp[][]
-  and dp[i][j] is the length of largest square whose bottom right corner is at i-1,j-1
-  therefore dp[i][j]=min(do[i-1][j-1],dp[i-1][j],dp[i][j-1])
-*/
-public int maxSquare(int[][] board){
-    if(board==null||board.length==0)
-        return 0;
-    int n=board.legnth,m=board[0].length;
-    int[][] dp=new int[n+1][m+1]; 
-
-	int max=0;
-	for(int i=1;i<=n;i++){
-		for(int j=1;j<=m;j++){
-			if(board[i-1][j-1]==1){
-				dp[i][j]=Math.min(dp[i-1][j-1]+1,Math.min(dp[i-1][j],dp[i][j-1]);
-				if(dp[i][j]>max)
-					max=dp[i][j];
-			}
-		}
-	}
-	return max;
-}
