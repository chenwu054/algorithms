/*
	no weight bipartite matching 
	Hungarian using DFS
	int[][] graph is there is connection, graph[i][j]==1
*/
int[] match;
boolean[] used;
public boolean dfs(int k){
	for(int i=0;i<used.length;i++){
		//if there is connection from k to i and i is not visited so far.
		if(graph[k][i]==1 && !used[i]){
			used[i]=true;
			//if i is not matched meaning there is an augmenting path
			//or add it to the alternating path and do the dfs to i.
			if(match[i]==-1||dfs(match[i])){
				match[i]=k;return true;
			}
		}
	}
	return false;
}
public int hungarian(int[][] graph){
	int maxMatchingNum =0;
	int n=graph.length;
	used = new boolean[n];
	match=new int[n];
	Arrays.fill(match,-1);
	for(int i=0;i<n;i++){
		Arrays.fill(used,false);
		if(dfs(i)) maxMatchingNum++;
	}
	return maxMatchingNum;
}
